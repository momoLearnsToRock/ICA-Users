// const Field = require('./SQLField');
const debug = require('debug')('app:helpers');
const sql = require('mssql');


const Field = class {
  constructor(name, type) {
    this.name = name;
    this.type = type;
  }
};

const Table = class {
  constructor(tableName, fields, autogeneratedPK) {
    if (!(fields instanceof Array)) {
      debug({ message: 'fields should be an array of objects of type fields' });
    }
    this.tableName = tableName;
    fields.forEach((f, index) => {
      if (!(fields[index] instanceof Field)) {
        debug({ message: 'fields should be an array of objects of type fields' });
      }
    });
    this.fields = fields;
    this.autogeneratedPK = autogeneratedPK;
  }

  getFieldNames(includeId) {
    let fieldsString = '';
    this.fields.forEach((item, index) => {
      if (includeId || item.name.toLowerCase() !== 'id') {
        fieldsString += item.name;
        if (index !== this.fields.length - 1) {
          fieldsString += ', ';
        }
      }
    });
    return fieldsString;
  }
};

const SQLTable = class extends Table {
  constructor(tableName, fields, autogeneratedPK) {
    super(tableName, fields, autogeneratedPK);
    this.singleQuotedTypes = ['string', 'datetime', 'guid', 'unique identifier'];
  }

  createInsertIntoStatement(includeId, jsonBody, sqlReq) {
    const fields = this.getFieldNames(includeId);
    let values = [];
    this.fields.forEach((item, index) => {
      if (includeId || item.name.toLowerCase() !== 'id') {
        if (item.name === 'ModifiedOn') {
          values.push('GETDATE()');
        } else {
          values.push(`@${item.name}`);
          sqlReq.input(`${item.name}`, jsonBody[item.name]);
        }
      }
    });
    return `INSERT INTO ${this.tableName} (${fields}) VALUES (${values.join(', ')})`;
  }

  createDeleteStatement(id, sqlReq) {
    sqlReq.input('id', id);
    return `DELETE FROM ${this.tableName} WHERE Id = @id`; // please note that this would even work with the single quotes even for bigint
  }

  createUpdateStatement(includeId, jsonBody, id, sqlReq) {
    let setValuesArray = [];
    this.fields.forEach((item) => {
      if (typeof jsonBody[item.name] !== 'undefined') {
        if ((includeId || item.name.toLowerCase() !== 'id') && item.name !== 'ModifiedOn') {
          setValuesArray.push(` ${item.name} = @${item.name}`);
          sqlReq.input(`${item.name}`, jsonBody[item.name]);
        }
      }
    });
    const query =
      `UPDATE ${this.tableName}
      SET ModifiedOn = GETDATE(), ${setValuesArray.join(', ')} 
      WHERE Id = '${id}'`;
    debug(query);
    return query;
  }
};

module.exports = {
  Field,
  Table,
  SQLTable,
};
